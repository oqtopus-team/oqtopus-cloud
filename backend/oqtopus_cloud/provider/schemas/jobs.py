# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-14T08:52:30+00:00
#   version:   0.25.9

from __future__ import annotations

from typing import Annotated, Literal, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class InternalJobStatus(
    RootModel[
        Literal["submitted", "ready", "running", "success", "failed", "cancelled"]
    ]
):
    root: Annotated[
        Literal["submitted", "ready", "running", "success", "failed", "cancelled"],
        Field(examples=["submitted"]),
    ]


class JobId(RootModel[UUID]):
    root: Annotated[UUID, Field(examples=["7af020f6-2e38-4d70-8cf0-4349650ea08c"])]


class JobInfo(RootModel[str]):
    root: Annotated[
        str,
        Field(
            examples=[
                "{'code': '{type: string, example: \"OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;\"}', 'Operator': 'X 0 Y 1 Z 5 I 2', 'result': {'00': 5020, '11': 4980}, 'transpiled_code': '', 'reason': ''}"
            ]
        ),
    ]


class TranspilerInfo(RootModel[str]):
    root: Annotated[
        str,
        Field(
            examples=[
                "{'qubit_allocation': {'0': 12, '1': 16}, 'skip_transpilation': false, 'seed_transpilation': 873}"
            ]
        ),
    ]


class SimulatorInfo(RootModel[str]):
    root: Annotated[
        str,
        Field(
            examples=[
                "{'n_qubits': 5, 'n_nodes': 12, 'n_per_node': 2, 'seed_simulation': 39058567, 'simulation_opt': {'optimization_method': 'light', 'optimization_block_size': 1, 'optimization_swap_level': 1}}"
            ]
        ),
    ]


class MitigationInfo(RootModel[str]):
    root: Annotated[str, Field(examples=["{'ro_error_mitigation': 'pseudo_inverse'}"])]


class JobDef(BaseModel):
    job_id: Optional[JobId] = None
    name: Annotated[Optional[str], Field(None, examples=["Bell State Sampling"])]
    description: Annotated[
        Optional[str], Field(None, examples=["Bell State Sampling Example"])
    ]
    device_id: Annotated[str, Field(examples=["Kawasaki"])]
    shots: Annotated[int, Field(examples=["1000"], ge=1, le=10000000)]
    job_type: Annotated[
        Optional[str], Field(None, examples=["'sampling' or 'estimation', 'sse'"])
    ]
    job_info: Optional[JobInfo] = None
    transpiler_info: Optional[TranspilerInfo] = None
    simulator_info: Optional[SimulatorInfo] = None
    mitigation_info: Optional[MitigationInfo] = None
    status: InternalJobStatus
    created_at: Annotated[AwareDatetime, Field(examples=["2022-10-19T11:45:34+09:00"])]
    updated_at: Annotated[
        Optional[AwareDatetime], Field(None, examples=["2022-10-19T11:45:34+09:00"])
    ]


class JobStatusUpdate(BaseModel):
    status: Annotated[Literal["running"], Field(examples=["running"])]


class JobStatusUpdateResponse(BaseModel):
    message: str


class InternalFetchableJobStatus(RootModel[Literal["submitted", "cancelling"]]):
    root: Annotated[Literal["submitted", "cancelling"], Field(examples=["submitted"])]


class UnfetchedJobsResponse(RootModel[list[Union[JobDef, JobId]]]):
    root: list[Union[JobDef, JobId]]
