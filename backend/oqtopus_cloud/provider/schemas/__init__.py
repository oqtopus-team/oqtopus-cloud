# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-09T06:40:46+00:00
#   version:   0.25.9

from __future__ import annotations

from typing import Annotated, Optional

from pydantic import BaseModel, Field


class CalibrationData(BaseModel):
    """
    Calibration data available only for 'QPU' devices
    """

    qubitConnectivity: Annotated[
        Optional[list[str]], Field(None, examples=[["(1,4)", "(4,5)", "(5,8)"]])
    ]
    t1: Annotated[
        Optional[dict[str, float]],
        Field(None, examples=[{"0": 55.51, "1": 37.03, "2": 57.13}]),
    ]
    t2: Annotated[
        Optional[dict[str, float]],
        Field(None, examples=[{"0": 99.31, "1": 111.03, "2": 30.12}]),
    ]
    roError: Annotated[
        Optional[dict[str, float]],
        Field(None, examples=[{"0": 0.0467, "1": 0.18, "2": 0.355}]),
    ]
    gateError: Annotated[
        Optional[dict[str, dict[str, float]]],
        Field(None, examples=[{"sx": {"0": 0.00692, "1": 0.00296, "2": 0.072}}]),
    ]
    measProb0As1: Annotated[
        Optional[dict[str, float]],
        Field(None, examples=[{"0": 0.00608, "1": 0.012, "2": 0.248}]),
    ]
    measProb1As0: Annotated[
        Optional[dict[str, float]],
        Field(None, examples=[{"0": 0.0281, "1": 0.386, "2": 0.0811}]),
    ]
    gateDuration: Annotated[
        Optional[dict[str, dict[str, float]]],
        Field(None, examples=[{"sx": {"0": 29.3, "1": 50.9, "2": 45.4}}]),
    ]
