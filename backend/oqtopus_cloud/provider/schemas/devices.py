# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-10T00:36:24+00:00
#   version:   0.25.9

from __future__ import annotations

from typing import Annotated, Literal, Optional, Union

from pydantic import AwareDatetime, BaseModel, Field, RootModel

from . import CalibrationData


class DeviceStatusUpdate(BaseModel):
    command: Annotated[
        Literal["DeviceStatusUpdate"], Field(examples=["DeviceStatusUpdate"])
    ]
    status: Optional[Literal["AVAILABLE", "NOT_AVAILABLE"]] = None
    restartAt: Annotated[
        Optional[AwareDatetime], Field(None, examples=["2023-09-10T14:00:00+09:00"])
    ]
    """
    Parameter mandatory and valid for status 'NOT_AVAILABLE'
    """


class DevicePendingTasksUpdate(BaseModel):
    command: Annotated[
        Literal["DevicePendingTasksUpdate"],
        Field(examples=["DevicePendingTasksUpdate"]),
    ]
    nPendingTasks: Optional[int] = None


class DeviceCalibrationUpdate(BaseModel):
    command: Annotated[
        Literal["DeviceCalibrationUpdate"], Field(examples=["DeviceCalibrationUpdate"])
    ]
    calibrationData: Optional[CalibrationData] = None
    calibratedAt: Annotated[
        Optional[AwareDatetime], Field(None, examples=["2023-09-10T14:00:00+09:00"])
    ]
    """
    Parameter mandatory and valid if calibrationData not null
    """


class DeviceDataUpdate(
    RootModel[
        Union[DeviceStatusUpdate, DevicePendingTasksUpdate, DeviceCalibrationUpdate]
    ]
):
    root: Annotated[
        Union[DeviceStatusUpdate, DevicePendingTasksUpdate, DeviceCalibrationUpdate],
        Field(discriminator="command"),
    ]


class DeviceDataUpdateResponse(BaseModel):
    message: Annotated[
        str, Field("Device's data updated", examples=["Device's data updated"])
    ]
