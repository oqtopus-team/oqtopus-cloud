# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-09T06:40:46+00:00
#   version:   0.25.9

from __future__ import annotations

from typing import Annotated, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel

from . import jobs


class ResultStatus(RootModel[Literal["SUCCESS", "FAILURE", "CANCELLED"]]):
    root: Annotated[
        Literal["SUCCESS", "FAILURE", "CANCELLED"],
        Field("SUCCESS", examples=["SUCCESS"]),
    ] = "SUCCESS"


class SamplingResult(RootModel[Optional[dict[str, int]]]):
    root: Optional[dict[str, int]] = None


class EstimationResult(RootModel[list[float]]):
    root: Annotated[
        list[float], Field(examples=[[1.5, 2.8]], max_length=2, min_length=2)
    ]


class Result(RootModel[Optional[Union[SamplingResult, EstimationResult]]]):
    root: Optional[Union[SamplingResult, EstimationResult]]


class ResultDef(BaseModel):
    jobId: jobs.JobId
    status: ResultStatus
    result: Result
    reason: Annotated[Optional[str], Field(...)]
    transpiledCode: Annotated[Optional[str], Field(...)]
    qubitAllocation: Annotated[
        Optional[dict[str, Optional[int]]], Field(None, examples=[{"0": 0, "1": 4}])
    ]
    """
    Parameter valid only for QPU devices
    """


class CreateResultResponse(BaseModel):
    message: str
