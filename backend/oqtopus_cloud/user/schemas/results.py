# generated by datamodel-codegen:
#   filename:  openapi.yaml

from __future__ import annotations

from typing import Annotated, Literal, Optional

from pydantic import BaseModel, Field, RootModel

from . import tasks


class ResultStatus(RootModel[Literal["SUCCESS", "FAILURE", "CANCELLED"]]):
    root: Annotated[
        Literal["SUCCESS", "FAILURE", "CANCELLED"],
        Field("SUCCESS", examples=["SUCCESS"]),
    ] = "SUCCESS"


class SamplingResultDef(BaseModel):
    taskId: tasks.TaskId
    status: ResultStatus
    result: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"11": 4980, "00": 5020}])
    ]
    """
    Provided only for successful results
    """
    reason: Optional[str] = None
    """
    Provided only for unsuccessful (failed, cancelled) results
    """
    transpiledCode: Optional[str] = None
    """
    Provided only for tasks with transpilation (tasks created with skipTranspilation=False), if traspilation was successfull
    """
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 0, "1": 4}])
    ]
    """
    Parameter valid only for QPU devices
    """


class EstimationResultDef(BaseModel):
    taskId: tasks.TaskId
    status: ResultStatus
    result: Annotated[
        Optional[list[float]],
        Field(None, examples=[[1.5, 2.8]], max_length=2, min_length=1),
    ]
    """
    Real and imaginary components of complex estimation result value<br>Provided only for successful results
    """
    reason: Optional[str] = None
    """
    Provided only for unsuccessful (failed, cancelled) results
    """
    transpiledCode: Optional[str] = None
    """
    Provided only for tasks with transpilation (tasks created with skipTranspilation=False), if traspilation was successfull
    """
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 0, "1": 4}])
    ]
    """
    Parameter valid only for QPU devices
    """
