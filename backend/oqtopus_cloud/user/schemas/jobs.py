# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-09T06:40:39+00:00
#   version:   0.25.9

from __future__ import annotations

from typing import Annotated, Any, Literal, Optional
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class JobId(RootModel[UUID]):
    root: Annotated[UUID, Field(examples=["7af020f6-2e38-4d70-8cf0-4349650ea08c"])]


class JobStatus(
    RootModel[
        Literal["submitted", "ready", "running", "success", "failed", "cancelled"]
    ]
):
    root: Annotated[
        Literal["submitted", "ready", "running", "success", "failed", "cancelled"],
        Field(examples=["submitted"]),
    ]


class JobInfo(BaseModel):
    jobId: JobId
    code: Annotated[
        str,
        Field(
            examples=[
                "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"
            ]
        ),
    ]
    name: Annotated[Optional[str], Field(None, examples=["Bell State Sampling"])]
    device: Annotated[str, Field(examples=["Kawasaki"])]
    nQubits: Optional[int] = None
    """
    Parameter exclusive with nNodes
    """
    nNodes: Annotated[Optional[int], Field(None, examples=[12])]
    """
    Parameter exclusive with nQubits<br/>Parameter valid only for 'simulator' devices
    """
    nShots: Annotated[int, Field(examples=["1000"], ge=1, le=10000000)]
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 12, "1": 16}])
    ]
    """
    Parameter valid only for QPU devices
    """
    skipTranspilation: Annotated[bool, Field(examples=[False])]
    seedTranspilation: Annotated[Optional[int], Field(None, examples=[873])]
    """
    Parameter valid only if skipTranspilation is false
    """
    seedSimulation: Annotated[Optional[int], Field(None, examples=[39058567])]
    """
    Parameter valid only for 'simulator' devices
    """
    roErrorMitigation: Annotated[
        Optional[Literal["none", "pseudo_inverse", "least_square"]],
        Field(None, examples=["pseudo_inverse"]),
    ]
    """
    Parameter valid only for QPU devices
    """
    nPerNode: Annotated[Optional[int], Field(None, examples=[5], ge=1)]
    """
    Parameter valid only for simulator devices
    """
    simulationOpt: Annotated[
        Optional[dict[str, Any]],
        Field(
            None,
            examples=[
                {
                    "optimizationMethod": "light",
                    "optimizationBlockSize": 1,
                    "optimizationSwapLevel": 1,
                }
            ],
        ),
    ]
    """
    Parameter valid only for simulator devices
    """
    note: Annotated[
        Optional[str], Field(None, examples=["Bell State Sampling Example"])
    ]
    status: JobStatus
    createdAt: Annotated[AwareDatetime, Field(examples=["2022-10-19T11:45:34+09:00"])]


class JobDef(BaseModel):
    code: Annotated[
        str,
        Field(
            examples=[
                "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"
            ]
        ),
    ]
    name: Annotated[Optional[str], Field(None, examples=["Bell State Sampling"])]
    device: Annotated[str, Field(examples=["Kawasaki"])]
    nQubits: Optional[int] = None
    """
    Parameter exclusive with nNodes
    """
    nNodes: Annotated[Optional[int], Field(None, examples=[12])]
    """
    Parameter exclusive with nQubits<br/>Parameter valid only for 'simulator' devices
    """
    nShots: Annotated[int, Field(examples=["1000"], ge=1, le=10000000)]
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 12, "1": 16}])
    ]
    """
    Parameter valid only for QPU devices
    """
    skipTranspilation: Annotated[bool, Field(False, examples=[False])]
    seedTranspilation: Annotated[Optional[int], Field(None, examples=[873])]
    """
    Parameter valid only if skipTranspilation is false
    """
    seedSimulation: Annotated[Optional[int], Field(None, examples=[39058567])]
    """
    Parameter valid only for 'simulator' devices
    """
    roErrorMitigation: Annotated[
        Literal["none", "pseudo_inverse", "least_square"],
        Field("none", examples=["pseudo_inverse"]),
    ]
    """
    Parameter valid only for QPU devices
    """
    nPerNode: Annotated[Optional[int], Field(None, examples=[5], ge=1)]
    """
    Parameter valid only for simulator devices
    """
    simulationOpt: Annotated[
        Optional[dict[str, Any]],
        Field(
            None,
            examples=[
                {
                    "optimizationMethod": "light",
                    "optimizationBlockSize": 1,
                    "optimizationSwapLevel": 1,
                }
            ],
        ),
    ]
    """
    Parameter valid only for simulator devices
    """
    note: Annotated[
        Optional[str], Field(None, examples=["Bell State Sampling Example"])
    ]


class SubmitJobResponse(BaseModel):
    """
    submit a job
    """

    jobId: JobId


class GetJobStatusResponse(BaseModel):
    """
    job status
    """

    jobId: JobId
    status: JobStatus
