# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-08-29T08:54:22+00:00
#   version:   0.25.8

from __future__ import annotations

from typing import Annotated, Any, Literal, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class TaskId(RootModel[UUID]):
    root: Annotated[UUID, Field(examples=["7af020f6-2e38-4d70-8cf0-4349650ea08c"])]


class TaskStatus(
    RootModel[
        Literal["QUEUED", "RUNNING", "COMPLETED", "FAILED", "CANCELLING", "CANCELLED"]
    ]
):
    root: Annotated[
        Literal["QUEUED", "RUNNING", "COMPLETED", "FAILED", "CANCELLING", "CANCELLED"],
        Field(examples=["QUEUED"]),
    ]


class SamplingTaskInfo(BaseModel):
    taskId: TaskId
    code: Annotated[
        str,
        Field(
            examples=[
                "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"
            ]
        ),
    ]
    name: Annotated[Optional[str], Field(None, examples=["Bell State Sampling"])]
    device: Annotated[str, Field(examples=["Kawasaki"])]
    nQubits: Optional[int] = None
    """
    Parameter exclusive with nNodes
    """
    nNodes: Annotated[Optional[int], Field(None, examples=[12])]
    """
    Parameter exclusive with nQubits<br/>Parameter valid only for 'simulator' devices
    """
    nShots: Annotated[int, Field(examples=["1000"], ge=1, le=10000000)]
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 12, "1": 16}])
    ]
    """
    Parameter valid only for QPU devices
    """
    skipTranspilation: Annotated[bool, Field(examples=[False])]
    seedTranspilation: Annotated[Optional[int], Field(None, examples=[873])]
    """
    Parameter valid only if skipTranspilation is false
    """
    seedSimulation: Annotated[Optional[int], Field(None, examples=[39058567])]
    """
    Parameter valid only for 'simulator' devices
    """
    roErrorMitigation: Annotated[
        Optional[Literal["none", "pseudo_inverse", "least_square"]],
        Field(None, examples=["pseudo_inverse"]),
    ]
    """
    Parameter valid only for QPU devices
    """
    nPerNode: Annotated[Optional[int], Field(None, examples=[5], ge=1)]
    """
    Parameter valid only for simulator devices
    """
    simulationOpt: Annotated[
        Optional[dict[str, Any]],
        Field(
            None,
            examples=[
                {
                    "optimizationMethod": "light",
                    "optimizationBlockSize": 1,
                    "optimizationSwapLevel": 1,
                }
            ],
        ),
    ]
    """
    Parameter valid only for simulator devices
    """
    note: Annotated[
        Optional[str], Field(None, examples=["Bell State Sampling Example"])
    ]
    status: TaskStatus
    createdAt: Annotated[AwareDatetime, Field(examples=["2022-10-19 11:45:34"])]


class SamplingTaskDef(BaseModel):
    code: Annotated[
        str,
        Field(
            examples=[
                "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"
            ]
        ),
    ]
    name: Annotated[Optional[str], Field(None, examples=["Bell State Sampling"])]
    device: Annotated[str, Field(examples=["Kawasaki"])]
    nQubits: Optional[int] = None
    """
    Parameter exclusive with nNodes
    """
    nNodes: Annotated[Optional[int], Field(None, examples=[12])]
    """
    Parameter exclusive with nQubits<br/>Parameter valid only for 'simulator' devices
    """
    nShots: Annotated[int, Field(examples=["1000"], ge=1, le=10000000)]
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 12, "1": 16}])
    ]
    """
    Parameter valid only for QPU devices
    """
    skipTranspilation: Annotated[bool, Field(False, examples=[False])]
    seedTranspilation: Annotated[Optional[int], Field(None, examples=[873])]
    """
    Parameter valid only if skipTranspilation is false
    """
    seedSimulation: Annotated[Optional[int], Field(None, examples=[39058567])]
    """
    Parameter valid only for 'simulator' devices
    """
    roErrorMitigation: Annotated[
        Literal["none", "pseudo_inverse", "least_square"],
        Field("none", examples=["pseudo_inverse"]),
    ]
    """
    Parameter valid only for QPU devices
    """
    nPerNode: Annotated[Optional[int], Field(None, examples=[5], ge=1)]
    """
    Parameter valid only for simulator devices
    """
    simulationOpt: Annotated[
        Optional[dict[str, Any]],
        Field(
            None,
            examples=[
                {
                    "optimizationMethod": "light",
                    "optimizationBlockSize": 1,
                    "optimizationSwapLevel": 1,
                }
            ],
        ),
    ]
    """
    Parameter valid only for simulator devices
    """
    note: Annotated[
        Optional[str], Field(None, examples=["Bell State Sampling Example"])
    ]


class SubmitTaskResponse(BaseModel):
    """
    submit a task
    """

    taskId: TaskId
    createdAt: Annotated[AwareDatetime, Field(examples=["2022-10-19 11:45:34"])]
    status: TaskStatus


class GetSamplingTaskStatusResponse(BaseModel):
    """
    task status
    """

    taskId: TaskId
    status: TaskStatus


class SingleOperator(RootModel[list[float]]):
    root: Annotated[
        list[float], Field(examples=[[1.5, 2.8]], max_length=2, min_length=2)
    ]
    """
    Real and imaginary components of complex coef value
    """


class SingleOperatorModel(RootModel[list[Union[str, SingleOperator]]]):
    root: Annotated[list[Union[str, SingleOperator]], Field(max_length=2, min_length=2)]


class Operator(RootModel[list[SingleOperatorModel]]):
    root: Annotated[
        list[SingleOperatorModel],
        Field(examples=[[["X 0 X 1", [1.5, 2.8]], ["Y 0 Z 1", [1.2, -2e-08]]]]),
    ]


class EstimationTaskInfo(BaseModel):
    taskId: TaskId
    code: Annotated[
        str,
        Field(
            examples=[
                "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"
            ]
        ),
    ]
    name: Annotated[Optional[str], Field(None, examples=["Bell State Estimation"])]
    device: Annotated[str, Field(examples=["Kawasaki"])]
    nQubits: Optional[int] = None
    """
    Parameter exclusive with nNodes
    """
    nNodes: Annotated[Optional[int], Field(None, examples=[12])]
    """
    Parameter exclusive with nQubits<br/>Parameter valid only for 'simulator' devices
    """
    method: Annotated[Literal["state_vector", "sampling"], Field(examples=["sampling"])]
    """
    state_vector method valid only for 'simulator' devices
    """
    nShots: Annotated[Optional[int], Field(None, examples=["1000"], ge=1, le=10000000)]
    """
    Parameter valid only for sampling method
    """
    operator: Operator
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 12, "1": 16}])
    ]
    """
    Parameter valid only for QPU devices
    """
    skipTranspilation: Annotated[bool, Field(examples=[False])]
    seedTranspilation: Annotated[Optional[int], Field(None, examples=[873])]
    """
    Parameter valid only if skipTranspilation is false
    """
    seedSimulation: Annotated[Optional[int], Field(None, examples=[39058567])]
    """
    Parameter valid only for 'simulator' devices
    """
    roErrorMitigation: Annotated[
        Optional[Literal["none", "pseudo_inverse", "least_square"]],
        Field(None, examples=["pseudo_inverse"]),
    ]
    """
    Parameter valid only for QPU devices
    """
    nPerNode: Annotated[Optional[int], Field(None, examples=[5], ge=1)]
    """
    Parameter valid only for simulator devices
    """
    simulationOpt: Annotated[
        Optional[dict[str, Any]],
        Field(
            None,
            examples=[
                {
                    "optimizationMethod": "light",
                    "optimizationBlockSize": 1,
                    "optimizationSwapLevel": 1,
                }
            ],
        ),
    ]
    """
    Parameter valid only for simulator devices
    """
    note: Annotated[
        Optional[str], Field(None, examples=["Bell State Estimation Example"])
    ]
    status: TaskStatus
    createdAt: Annotated[AwareDatetime, Field(examples=["2022-10-19 11:45:34"])]


class EstimationTaskDef(BaseModel):
    code: Annotated[
        str,
        Field(
            examples=[
                "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"
            ]
        ),
    ]
    name: Annotated[Optional[str], Field(None, examples=["Bell State Estimation"])]
    device: Annotated[str, Field(examples=["Kawasaki"])]
    nQubits: Optional[int] = None
    """
    Parameter exclusive with nNodes
    """
    nNodes: Annotated[Optional[int], Field(None, examples=[12])]
    """
    Parameter exclusive with nQubits<br/>Parameter valid only for 'simulator' devices
    """
    method: Annotated[Literal["state_vector", "sampling"], Field(examples=["sampling"])]
    """
    state_vector method valid only for 'simulator' devices
    """
    nShots: Annotated[Optional[int], Field(None, examples=["1000"], ge=1, le=10000000)]
    """
    Parameter valid only for sampling method
    """
    operator: Operator
    qubitAllocation: Annotated[
        Optional[dict[str, int]], Field(None, examples=[{"0": 12, "1": 16}])
    ]
    """
    Parameter valid only for QPU devices
    """
    skipTranspilation: Annotated[bool, Field(False, examples=[False])]
    seedTranspilation: Annotated[Optional[int], Field(None, examples=[873])]
    """
    Parameter valid only if skipTranspilation is false
    """
    seedSimulation: Annotated[Optional[int], Field(None, examples=[39058567])]
    """
    Parameter valid only for 'simulator' devices
    """
    roErrorMitigation: Annotated[
        Literal["none", "pseudo_inverse", "least_square"],
        Field("none", examples=["pseudo_inverse"]),
    ]
    """
    Parameter valid only for QPU devices
    """
    nPerNode: Annotated[Optional[int], Field(None, examples=[5], ge=1)]
    """
    Parameter valid only for simulator devices
    """
    simulationOpt: Annotated[
        Optional[dict[str, Any]],
        Field(
            None,
            examples=[
                {
                    "optimizationMethod": "light",
                    "optimizationBlockSize": 1,
                    "optimizationSwapLevel": 1,
                }
            ],
        ),
    ]
    """
    Parameter valid only for simulator devices
    """
    note: Annotated[
        Optional[str], Field(None, examples=["Bell State Estimation Example"])
    ]


class GetEstimationTaskStatusResponse(BaseModel):
    """
    task status
    """

    taskId: TaskId
    status: TaskStatus
