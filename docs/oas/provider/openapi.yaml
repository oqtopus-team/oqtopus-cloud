openapi: 3.0.1
info:
  title: OQTOPUS Cloud Provider API
  version: '1.0'
  contact:
    name: oqtopus-team
    email: oqtopus-team[at]googlegroups.com
  description: OQTOPUS Cloud Provider API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8888
    description: Local server url
paths:
  /devices/{device_id}:
    patch:
      tags:
        - devices
      summary: Update data of selected device
      description: Update data of selected device.<br/>Modifiable device propeties are:<br/><br/> - status (all device types)<br/> - number of pending jobs  (all device types)<br/>- calibrationData (QPU devices only)
      operationId: patchDeviceData
      security: []
      parameters:
        - in: path
          name: device_id
          description: Device ID
          required: true
          schema:
            type: string
            example: Kawasaki
      requestBody:
        description: New calibration data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devices.DeviceDataUpdate'
            examples:
              status update (unavailable):
                value:
                  command: DeviceStatusUpdate
                  status: unavailable
                  available_at: '2023-09-10T14:00:00Z'
              status update (available):
                value:
                  command: DeviceStatusUpdate
                  status: available
              pending jobs update:
                value:
                  command: DevicePendingJobsUpdate
                  n_pending_jobs: 6
              calibrationData update:
                value:
                  command: DeviceCalibrationUpdate
                  device_info: '{ ''calibration_data'': { ''qubit_connectivity'': [''(1,4)'', ''(4,5)'', ''(5,8)''], ''t1'': {''0'': 55.51, ''1'': 37.03, ''2'': 57.13}, ''t2'': {''0'': 99.31, ''1'': 111.03, ''2'': 30.12}, ''ro_error'': {''0'': 4.67e-2, ''1'': 1.8e-1, ''2'': 3.55e-1}, ''gate_error'': {''sx'': {''0'': 6.92e-3, ''1'': 2.96e-3, ''2'': 7.2e-2}}, ''meas_prob0_as1'': {''0'': 6.08e-3, ''1'': 1.2e-2, ''2'': 2.48e-1}, ''meas_prob1_as0'': {''0'': 2.81e-2, ''1'': 3.86e-1, ''2'': 8.11e-2}, ''gate_duration'': {''sx'': {''0'': 29.3, ''1'': 50.9, ''2'': 45.4}} }, }'
                  calibrated_at: '2023-09-10T14:00:00Z'
      responses:
        '200':
          description: Device's data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/devices.DeviceDataUpdateResponse'
              example:
                message: Device's data updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequest'
              example:
                detail: Bad request malformed input data
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                detail: Device not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                detail: Internal server error
  /jobs:
    get:
      tags:
        - jobs
      summary: Search jobs for a device
      description: Search jobs for a device
      operationId: getjobs
      security: []
      parameters:
        - in: query
          name: device_id
          required: true
          description: Device identifier
          schema:
            type: string
            example: Kawasaki
        - in: query
          name: status
          description: Additional search parameter:<br/> Search jobs with specified status only
          schema:
            $ref: '#/components/schemas/jobs.InternalJobStatus'
        - in: query
          name: max_results
          description: Additional search parameter:<br/> Set max number of quantum jobs to return in single request
          schema:
            type: integer
            example: 1
        - in: query
          name: timestamp
          description: Additional search parameter:<br/> Fetch jobs created after the specified timetsamp
          schema:
            type: string
            example: '2022-12-15 15:54:46'
      responses:
        '200':
          description: List of jobs for a device
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/jobs.JobDef'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequest'
              example:
                detail: Bad request malformed input data
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                detail: Internal server error
  /jobs/{job_id}:
    get:
      summary: Get a job by ID
      description: Get a job by ID
      operationId: getJob
      security: []
      tags:
        - jobs
      parameters:
        - in: path
          name: job_id
          required: true
          description: Job identifier
          schema:
            type: string
      responses:
        '200':
          description: Return quantum job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobs.JobDef'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequest'
              example:
                detail: Bad request malformed input data
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                detail: job not found
    patch:
      summary: Modify selected quantum job (update status).
      description: Used by device to set job status to "RUNNING".<br/>Other statuses are set by CloudAPI automatically when result is created
      operationId: patchJob
      security: []
      tags:
        - jobs
      parameters:
        - in: path
          name: job_id
          required: true
          description: Job identifier
          schema:
            type: string
      requestBody:
        description: 'New job status. '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobs.JobStatusUpdate'
      responses:
        '200':
          description: job data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobs.JobStatusUpdateResponse'
              example:
                message: job data updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequest'
              example:
                detail: Bad request malformed input data
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                detail: job not found
  /jobs/unfetched:
    get:
      summary: Fetch jobs for device
      description: 'Fetches jobs for execution/cancel<br/><br/>Operation is valid only for job with status: submitted or cancelling. After the operation job status is changed to appropriate FETCHED state (QUEUED_FETCHED or CANCELLING_FETCHED)'
      operationId: getUnfetchedJobs
      security: []
      tags:
        - jobs
      parameters:
        - in: query
          name: device_id
          required: true
          description: Device identifier
          schema:
            type: string
            example: Kawasaki
        - in: query
          name: status
          required: true
          description: Fetch jobs with specified status
          schema:
            $ref: '#/components/schemas/jobs.InternalFetchableJobStatus'
        - in: query
          name: max_results
          description: Additional search parameter:<br/> Set max number of quantum jobs to return in single request
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of jobs for execution (all job data) / cancel (jobIds only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobs.UnfetchedJobsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequest'
              example:
                detail: Bad request malformed input data
components:
  schemas:
    devices.DeviceStatusUpdate:
      type: object
      properties:
        command:
          type: string
          example: DeviceStatusUpdate
        status:
          type: string
          enum:
            - available
            - unavailable
        available_at:
          description: Parameter mandatory and valid for status 'unavailable'
          type: string
          format: date-time
          example: '2023-09-10T14:00:00+09:00'
    devices.DevicePendingJobsUpdate:
      type: object
      properties:
        command:
          type: string
          example: DevicePendingJobsUpdate
        n_pending_jobs:
          type: integer
    devices.DeviceCalibrationUpdate:
      type: object
      properties:
        command:
          type: string
          example: DeviceCalibrationUpdate
        device_info:
          description: json format calibration_data and n_nodes etc
          type: string
          example: '{''n_nodes'': 512, ''calibration_data'': {''qubit_connectivity'': [''(1,4)'', ''(4,5)'', ''(5,8)''], ''t1'': {''0'': 55.51, ''1'': 37.03, ''2'': 57.13}}'
        calibrated_at:
          description: Parameter mandatory and valid if calibrationData not null
          type: string
          format: date-time
          example: '2023-09-10T14:00:00+09:00'
    devices.DeviceDataUpdate:
      discriminator:
        propertyName: command
        mapping:
          DeviceStatusUpdate: '#/components/schemas/devices.DeviceStatusUpdate'
          DevicePendingJobsUpdate: '#/components/schemas/devices.DevicePendingJobsUpdate'
          DeviceCalibrationUpdate: '#/components/schemas/devices.DeviceCalibrationUpdate'
      oneOf:
        - $ref: '#/components/schemas/devices.DeviceStatusUpdate'
        - $ref: '#/components/schemas/devices.DevicePendingJobsUpdate'
        - $ref: '#/components/schemas/devices.DeviceCalibrationUpdate'
    devices.DeviceDataUpdateResponse:
      type: object
      properties:
        message:
          type: string
          default: Device's data updated
          example: Device's data updated
      required:
        - message
    error.BadRequest:
      type: object
      properties:
        detail:
          type: string
      required:
        - detail
    error.NotFoundError:
      type: object
      properties:
        detail:
          type: string
      required:
        - detail
    error.InternalServerError:
      type: object
      properties:
        detail:
          type: string
      required:
        - detail
    jobs.InternalJobStatus:
      type: string
      enum:
        - submitted
        - ready
        - running
        - success
        - failed
        - cancelled
      example: submitted
    jobs.JobId:
      type: string
      format: uuid
      example: 7af020f6-2e38-4d70-8cf0-4349650ea08c
    jobs.JobInfo:
      type: string
      example: '{''code'': ''{type: string, example: "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"}'', ''Operator'': ''X 0 Y 1 Z 5 I 2'', ''result'': {''00'': 5020, ''11'': 4980}, ''transpiled_code'': '''', ''reason'': ''''}'
    jobs.TranspilerInfo:
      type: string
      example: '{''qubit_allocation'': {''0'': 12, ''1'': 16}, ''skip_transpilation'': false, ''seed_transpilation'': 873}'
    jobs.SimulatorInfo:
      type: string
      example: '{''n_qubits'': 5, ''n_nodes'': 12, ''n_per_node'': 2, ''seed_simulation'': 39058567, ''simulation_opt'': {''optimization_method'': ''light'', ''optimization_block_size'': 1, ''optimization_swap_level'': 1}}'
    jobs.MitigationInfo:
      type: string
      example: '{''ro_error_mitigation'': ''pseudo_inverse''}'
    jobs.JobDef:
      type: object
      properties:
        job_id:
          $ref: '#/components/schemas/jobs.JobId'
        name:
          type: string
          example: Bell State Sampling
        description:
          type: string
          example: Bell State Sampling Example
        device_id:
          type: string
          example: Kawasaki
        shots:
          type: integer
          minimum: 1
          maximum: 10000000
          example: '1000'
        job_type:
          type: string
          example: '''sampling'' or ''estimation'', ''sse'''
        job_info:
          $ref: '#/components/schemas/jobs.JobInfo'
        transpiler_info:
          $ref: '#/components/schemas/jobs.TranspilerInfo'
        simulator_info:
          $ref: '#/components/schemas/jobs.SimulatorInfo'
        mitigation_info:
          $ref: '#/components/schemas/jobs.MitigationInfo'
        status:
          $ref: '#/components/schemas/jobs.InternalJobStatus'
        created_at:
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+09:00'
        updated_at:
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+09:00'
      required:
        - device_id
        - shots
        - status
        - created_at
      example:
        job_id: 7af020f6-2e38-4d70-8cf0-4349650ea08c
        name: Bell State Sampling
        description: Bell State Sampling Example
        device_id: Kawasaki
        job_info: '{''code'': ''{type: string, example: "OPENQASM 3; qubit[2] q; bit[2] c; h q[0]; cnot q[0], q[1]; c = measure q;"}'', ''operator'': ''X 0 Y 1 Z 5 I 2''}'
        transpiler_info: '{''qubit_allocation'': {''0'': 12, ''1'': 16}, ''skip_transpilation'': false, ''seed_transpilation'': 873}'
        simulator_info: '{''n_qubits'': 5, ''n_nodes'': 12, ''n_per_node'': 2, ''seed_simulation'': 39058567, ''simulation_opt'': {''optimization_method'': ''light'', ''optimization_block_size'': 1, ''optimization_swap_level'': 1}}'
        mitigation_info: '{''ro_error_mitigation'': ''pseudo_inverse''}'
        job_type: sampling
        shots: 1000
        status: submitted
        created_at: '2022-10-19T11:45:34+09:00'
        updated_at: '2022-10-19T11:45:34+09:00'
    jobs.JobStatusUpdate:
      type: object
      properties:
        status:
          type: string
          enum:
            - running
          example: running
      required:
        - status
    jobs.JobStatusUpdateResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    jobs.InternalFetchableJobStatus:
      type: string
      enum:
        - queued
        - cancelling
      example: queued
    jobs.UnfetchedJobsResponse:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/jobs.JobDef'
          - $ref: '#/components/schemas/jobs.JobId'
